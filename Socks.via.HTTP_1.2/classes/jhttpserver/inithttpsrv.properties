###########################
# JHttpServer property file
###########################

# THIS FILE IS USED BY THE HTTP SERVER/SERVLET ENGINE
# PLEASE BE CAREFUL WHEN YOU EDIT IT, OR THE PROGRAM WON'T WORK
# IF YOU MODIFY THIS FILE, PLEASE RESTART THE SERVER

# DO NOT MODIFY THE FOLLOWING LINE
[JHttpServer]

#----------------------
# Logging configuration
#----------------------

# Path of the logfile
jhttpserver.logfile.name = jhttpserver.log
# Logfile level (0=ALL, 1=DEBUG, 2=INFO, 3=WARN, 4=ERROR, 5=FATAL, 6=OFF), level 6 means no logging to file
jhttpserver.logfile.level = 2


#--------------------------
# HTTP Server configuration
#--------------------------

# The ServerName is the name returned by the server to the browser.
# This is not used by Socks via HTTP, so you can leave the default value (localhost)
jhttpserver.server.name = localhost

# The port the server will be listening to. I recommend to keep the default value 80
# for Socks via HTTP because most firewalls only allow HTTP traffic on port 80
jhttpserver.server.port = 9988

# Uncomment the following line if you want to serve static files, and put the right server root instead of /tmp
# If you don't EXACTLY understand what this option does, DO NOT UNCOMMENT THIS LINE, IT MAY ALLOW
# EVERYBODY TO ACCESS ALL FILES ON YOUR COMPUTER. YOU HAVE BEEN WARNED.
#jhttpserver.server.root = /tmp

# Uncomment the following line if you only want to listen on one IP (for computers having more than one network interface).
# If you don't EXACTLY understand what this option does, don't use it.
#jhttpserver.server.bindip = 127.0.0.1

# Do you want to allow GZIP compression when serving static files. This is BETA code
# I recommend to leave it disabled (=commented)
#jhttpserver.server.enablegzip = true

# Servlets aliases
# This allows you to hide the real Socks via HTTP URL if
# your network administrator is suspicious about
# the repeated access to the same URL
# If you modify the following lines, please modify the init.properties and initsrv.properties files too.
jhttpserver.aliases = alias1, alias2, alias3
jhttpserver.alias1.realurl = /servlet/jhttpserver.ServletTest
jhttpserver.alias1.fakeurl = /test
jhttpserver.alias2.realurl = /servlet/socksviahttp.server.ServletSocks
jhttpserver.alias2.fakeurl = /svh
jhttpserver.alias3.realurl = /servlet/socksviahttp.server.admin.ServletAdmin
jhttpserver.alias3.fakeurl = /svhadmin

# List all servlets to preload (when the HTTP Server starts)
# It's a good idea to preload Socks via HTTP Servlets, but it's not mandatory
jhttpserver.preload.servlets = socksviahttp.server.ServletSocks, socksviahttp.server.admin.ServletAdmin
